{"ast":null,"code":"import _regeneratorRuntime from \"/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport API from './API';\nimport APIRoutes from '../../res/values/APIRoutes';\nimport { successfulResponse, unsuccessfulResponse } from '../../helpers/responseBuilders';\nimport Texts from '../../res/values/Texts';\nexport var createUser =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(username, passwordValue, authType, token, oauthId) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return API.post(APIRoutes.createUser, {\n              username: username,\n              password: passwordValue,\n              authType: authType,\n              token: token,\n              oauthId: oauthId\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", successfulResponse(Texts.userCreationSuccess));\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", unsuccessfulResponse(Texts.userAlreadyExists));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 6]]);\n  }));\n\n  return function createUser(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var connectUser =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(username, passwordValue, authType, token, oauthId) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return API.post(APIRoutes.connectUser, {\n              username: username,\n              password: passwordValue,\n              authType: authType,\n              token: token,\n              oauthId: oauthId\n            });\n\n          case 3:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", successfulResponse(Texts.nowConnected, response.data));\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", unsuccessfulResponse(Texts.invalidCredentials));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n\n  return function connectUser(_x6, _x7, _x8, _x9, _x10) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/web/src/services/Users/Requests.js"],"names":["API","APIRoutes","successfulResponse","unsuccessfulResponse","Texts","createUser","username","passwordValue","authType","token","oauthId","post","password","userCreationSuccess","userAlreadyExists","connectUser","response","nowConnected","data","invalidCredentials"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,QAAyD,gCAAzD;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAO,IAAMC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,QAAP,EAAiBC,aAAjB,EAAgCC,QAAhC,EAA0CC,KAA1C,EAAiDC,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEhBV,GAAG,CAACW,IAAJ,CACJV,SAAS,CAACI,UADN,EAEJ;AACEC,cAAAA,QAAQ,EAAEA,QADZ;AAEEM,cAAAA,QAAQ,EAAEL,aAFZ;AAGEC,cAAAA,QAAQ,EAAEA,QAHZ;AAIEC,cAAAA,KAAK,EAAEA,KAJT;AAKEC,cAAAA,OAAO,EAAEA;AALX,aAFI,CAFgB;;AAAA;AAAA,6CAWfR,kBAAkB,CAACE,KAAK,CAACS,mBAAP,CAXH;;AAAA;AAAA;AAAA;AAAA,6CAafV,oBAAoB,CAACC,KAAK,CAACU,iBAAP,CAbL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVT,UAAU;AAAA;AAAA;AAAA,GAAhB;AAiBP,OAAO,IAAMU,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOT,QAAP,EAAiBC,aAAjB,EAAgCC,QAAhC,EAA0CC,KAA1C,EAAiDC,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEFV,GAAG,CAACW,IAAJ,CACnBV,SAAS,CAACc,WADS,EAEnB;AACET,cAAAA,QAAQ,EAAEA,QADZ;AAEEM,cAAAA,QAAQ,EAAEL,aAFZ;AAGEC,cAAAA,QAAQ,EAAEA,QAHZ;AAIEC,cAAAA,KAAK,EAAEA,KAJT;AAKEC,cAAAA,OAAO,EAAEA;AALX,aAFmB,CAFE;;AAAA;AAEnBM,YAAAA,QAFmB;AAAA,8CAWhBd,kBAAkB,CAACE,KAAK,CAACa,YAAP,EAAqBD,QAAQ,CAACE,IAA9B,CAXF;;AAAA;AAAA;AAAA;AAAA,8CAahBf,oBAAoB,CAACC,KAAK,CAACe,kBAAP,CAbJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import API from './API'\nimport APIRoutes from '../../res/values/APIRoutes'\nimport { successfulResponse, unsuccessfulResponse } from '../../helpers/responseBuilders'\n\nimport Texts from '../../res/values/Texts'\n\nexport const createUser = async (username, passwordValue, authType, token, oauthId) => {\n  try {\n    await API.post(\n      APIRoutes.createUser,\n      {\n        username: username,\n        password: passwordValue,\n        authType: authType,\n        token: token,\n        oauthId: oauthId\n      })\n    return successfulResponse(Texts.userCreationSuccess)\n  } catch (error) {\n    return unsuccessfulResponse(Texts.userAlreadyExists)\n  }\n}\n\nexport const connectUser = async (username, passwordValue, authType, token, oauthId) => {\n  try {\n    let response = await API.post(\n      APIRoutes.connectUser,\n      {\n        username: username,\n        password: passwordValue,\n        authType: authType,\n        token: token,\n        oauthId: oauthId\n      })\n    return successfulResponse(Texts.nowConnected, response.data)\n  } catch (error) {\n    return unsuccessfulResponse(Texts.invalidCredentials)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}